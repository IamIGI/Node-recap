// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productsCreatedByUser Product[] @relation("ProductsCreatedByUser")

  // #.1 One to one with User-Cart
  //User could exists without assigned cart
  // cart Cart?
  userCartItems CartItem[] @relation("UserCartItems")
}

model Product {
  id          String   @id @default(uuid())
  title       String
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(name: "ProductsCreatedByUser", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  //#.2 Product could exists without assigned cartItem
  cartItem CartItem?
}

// model Cart {
//   id String @id @default(uuid())

//   // #.1 One to one with User-Cart
//   //Cart have to be always connected to the user
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   cartItems CartItem[] @relation(name: "CartItems")
// }

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // #.2 One to One, CartItem have to be always connected to the product
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique

  user   User   @relation(name: "UserCartItems", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // cart   Cart   @relation(name: "CartItems", fields: [cartId], references: [id], onDelete: Cascade)
  // cartId String
}
